<div class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <div class="bg-white shadow rounded-lg">
    <div class="px-4 py-5 sm:p-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
        Connect to <%= DataSourceConnection::SOURCE_TYPES[@source_type] || 'Data Source' %>
      </h3>
      
      <%= form_with model: @data_source_connection, local: true do |form| %>
        <% if @data_source_connection.errors.any? %>
          <div class="mb-4 bg-red-50 border border-red-200 rounded-md p-4">
            <h4 class="text-sm font-medium text-red-800">There were errors with your submission:</h4>
            <ul class="mt-2 text-sm text-red-600 list-disc list-inside">
              <% @data_source_connection.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>
        
        <%= form.hidden_field :source_type, value: @source_type %>
        
        <!-- Common Fields -->
        <div class="mb-4">
          <%= form.label :name, "Connection Name", class: "block text-sm font-medium text-gray-700" %>
          <%= form.text_field :name, 
              class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm",
              placeholder: "My #{DataSourceConnection::SOURCE_TYPES[@source_type]} Connection" %>
        </div>
        
        <!-- Source-specific Fields -->
        <% case @source_type %>
        <% when 'snowflake' %>
          <%= render 'snowflake_fields', form: form %>
        <% when 'bigquery' %>
          <%= render 'bigquery_fields', form: form %>
        <% when 'postgresql' %>
          <%= render 'postgresql_fields', form: form %>
        <% when 'mysql' %>
          <%= render 'mysql_fields', form: form %>
        <% end %>
        
        <div class="mt-6 flex items-center justify-between">
          <%= link_to "Cancel", data_source_connections_path, 
              class: "text-sm text-gray-600 hover:text-gray-900" %>
          
          <div class="flex space-x-3">
            <button type="button" id="test-connection-btn"
                    class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Test Connection
            </button>
            
            <%= form.submit "Create Connection", 
                class: "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" %>
          </div>
        </div>
      <% end %>
    </div>
  </div>
  
  <!-- Connection Test Result -->
  <div id="test-result" class="hidden mt-4 bg-white shadow rounded-lg p-4">
    <div class="flex items-center">
      <div id="test-spinner" class="hidden animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
      <div id="test-success" class="hidden">
        <svg class="h-5 w-5 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
      </div>
      <div id="test-error" class="hidden">
        <svg class="h-5 w-5 text-red-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </div>
      <span id="test-message" class="text-sm text-gray-700"></span>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const testBtn = document.getElementById('test-connection-btn');
  const testResult = document.getElementById('test-result');
  const testSpinner = document.getElementById('test-spinner');
  const testSuccess = document.getElementById('test-success');
  const testError = document.getElementById('test-error');
  const testMessage = document.getElementById('test-message');
  
  testBtn?.addEventListener('click', async function() {
    // Reset state
    testResult.classList.remove('hidden');
    testSpinner.classList.remove('hidden');
    testSuccess.classList.add('hidden');
    testError.classList.add('hidden');
    testMessage.textContent = 'Testing connection...';
    
    // Gather form data
    const formData = new FormData(document.querySelector('form'));
    const connectionData = {};
    
    for (let [key, value] of formData.entries()) {
      connectionData[key] = value;
    }
    
    try {
      // In a real implementation, this would make an API call to test the connection
      // For now, we'll simulate a test
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simulate success
      testSpinner.classList.add('hidden');
      testSuccess.classList.remove('hidden');
      testMessage.textContent = 'Connection successful!';
      testMessage.classList.add('text-green-700');
    } catch (error) {
      testSpinner.classList.add('hidden');
      testError.classList.remove('hidden');
      testMessage.textContent = 'Connection failed: ' + error.message;
      testMessage.classList.add('text-red-700');
    }
  });
});
</script>